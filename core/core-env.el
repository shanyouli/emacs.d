;;; core/core-env.el.el -*- lexical-binding: t -*-


(require 'load-env-vars)

(defvar lye-env-vars-file
  (lib-f-join (or lye-emacs-cache-dir user-emacs-directory) "lye.env")
  "Absolute path to the env file where environment variables are set.")

(defvar lye-env-ignoronment-variables
  '(
    "DBUS_SESSION_BUS_ADDRESS"
    "GPG_AGENT_INFO"
    "SSH_AGENT_PID"
    "SSH_AUTH_SOCK"
    )
  "Ignored environments variables.
Environment variables with names matching these regexps are not
Imported into the `lye.env' file.")

(defvar lye--lye-env-loaded nil
  "non-nil if `lye/load-lye-env' has been called at least once.")

(defun lye//init-lye-env (&optional force)
  "Attempt to fetch the environment variables from the users shell.
This solution is far from perfect and we shuld not rely on this function
a lot. We use it only to initialize the env file when it does not exist
yet.
If FORCE is non-nil then force the initialization of the file, note that the
current contents of the file will be overwritten."
  (when (or force (not (file-exists-p lye-env-vars-file)))
    (with-temp-file lye-env-vars-file
      (let ((shell-command-switches (cond
                                     ((or IS-LINUX IS-MAC)
                                      ;; execute env twice, once with a
                                      ;; non-interactive login shell and
                                      ;; once with and interactive shell
                                      ;; in order to capture all the init
                                      ;; files possible.
                                      '("-lc" "-ic"))
                                     ((eq system-type 'windows-nt) '("-c"))))
            (tmpfile (make-temp-file lye-env-vars-file))
            (executable (cond ((or IS-LINUX IS-MAC) "env")
                              ((eq system-type 'windows-nt) "set"))))
        (insert
         (concat
          "# -----------------------------------------------------------------------------\n"
          "#                    Lye environment variables\n"
          "# -----------------------------------------------------------------------------\n"
          "# This file has been generated by Lye-emacs. It contains all environment\n"
          "# variables defined in your default shell except hose with names matching\n"
          "# regexps in `lye-env-ignoronment-variables'. If you add any\n"
          "# duplicate settings for a variable, only the first setting is effective.\n"
          "# PATH is a special case: all PATH settings are read, each non-duplicate\n"
          "# directory entry is appended to the `exec-path' variable, and then PATH is\n"
          "# set to the final value of `exec-path'.\n"
          "#\n"
          "# You can safely edit this file to change values or add or remove entries.\n"
          "# Lye-emacs won't overwrite the file unless you call the function\n"
          "# `lye/force-init-lye-env'.\n"
          "#\n"
          "# If you don't want to use this file but would rather mangage your environment\n"
          "# If you don't want to use this file but would rather manage your environment\n"
          "# variables yourself, remove the call to `lye/load-lye-env' from\n"
          "# the `lye/user-env' function in your dotfile and replace it with\n"
          "# your own initialization code. You can use `exec-path-from-shell' if you add\n"
          "# it to your additional packages, or simply use `setenv' and\n"
          "# `(add-to-list 'exec-path ...)', which are built-in.\n"
          "#\n"
          "# It is recommended to use this file as it unambiguously and explicitly sets\n"
          "# the values of your environment varialbes.\n"
          "# -----------------------------------------------------------------------------\n"
          "\n"
          "# Environment varialbes:\n"
          "# ----------------------\n"))
        (let ((env-point (point)))
          (dolist (shell-command-switch shell-command-switches)
            (call-process-shell-command
             (concat executable " > " (shell-quote-argument tmpfile)))
            (insert-file tmpfile))
          (delete-file tmpfile)
          ;; sort the environment variables
          (sort-regexp-fields nil "^.*$" ".*?=" env-point (point-max))
          ;; remove adjacent duplicated lines
          (delete-duplicate-lines env-point (point-max) nil t)
          ;; remove ignored environment variables
          (dolist (v lye-env-ignoronment-variables)
            (flush-lines v env-point (point-max))))))
    (lye-buffer/warning
     (concat "Lye has imported your environment variables from "
             " your shell and saved them to `%s'.\n"
             "Open this file for more info or call "
             "`lye/edit-env' function.")
     lye-env-vars-file)))

(defun lye/force-init-lye-env ()
  "Forces a reinitialization of environment varialbes."
  (interactive)
  (lye//init-lye-env t))

(defun lye/edit-env ()
  "Open the `lye.env' file for editing."
  (interactive)
  (if (and lye--lye-env-loaded (file-exists-p lye-env-vars-file))
      (progn
        (find-file lye-env-vars-file)
        (when (fboundp 'dotenv-mode)
          (dotenv-mode)))
    ;; fallback to the lye/user-env
    ;; (lye/go-to-user-env)
    ))

;;;###autoload
(defun lye/load-lye-env (&optional force)
  "Load the environment varialbes ffrom the `lye.env' file.
If FORCE is non-nil the force the loading of environment variales from env.
file."
  (interactive "P")
  (setq lye--lye-env-loaded t)
  (when (or force (display-graphic-p))
    (lye//init-lye-env force)
    (load-env-vars lye-env-vars-file)))
